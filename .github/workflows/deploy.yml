name: CI/CD tomson-ai to GCP VM

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

 # 5) GCP 인증 (서비스 계정 키)
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 6) Docker → Artifact Registry 인증 설정dsaads
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker --quiet asia-northeast3-docker.pkg.dev

      # 7) Docker 이미지 빌드
      - name: Build & Tag Docker image
        run: |
          REPO=tomson-ai
          IMAGE=asia-northeast3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${REPO}/tomson-ai:${{ github.sha }}
          docker build -t $IMAGE .
          
      # 8) 이미지 푸시
      - name: Push to Artifact Registry
        run: |
          REPO=tomson-ai
          IMAGE=asia-northeast3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${REPO}/tomson-ai:${{ github.sha }}
          docker push $IMAGE

      # 6. VM에 SSH 접속 후 컨테이너 재시작 sdsasaddsa
      - name: Deploy to VM
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker pull asia-northeast3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/tomson-ai/tomson-ai:${{ github.sha }}
            docker stop tomson-ai || true
            docker rm tomson-ai || true
            docker run -d -p 80:8007 \
              -e DB_URL="${{ secrets.DB_URL }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              --name tomson-ai \
              asia-northeast3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/tomson-ai/tomson-ai:${{ github.sha }}


- name: Deploy to VM via SSH

        env :
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

        run: |          
          REPO=tomson-ai
          IMAGE=asia-northeast3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${REPO}/tomson-ai:${{ github.sha }}
        
          ssh -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -i ~/.ssh/id_rsa \
              ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
              "set -Eeuo pipefail
               set -x
          
               DB_URL='${DB_URL}'
               DB_USERNAME='${DB_USERNAME}'
               DB_PASSWORD='${DB_PASSWORD}'
                    
               echo '>>> Stop & remove old container'
               docker pull $IMAGE
          
               echo '>>> Stop & remove old container'
               docker stop backend-container 2>/dev/null || true 
               docker rm backend-container 2>/dev/null || true 
          
               echo '>>> Run new container'
               docker run -d --name backend-container \
               -p 80:8080 \
               -e SPRING_DATASOURCE_URL=\"\$DB_URL\" \
               -e SPRING_DATASOURCE_USERNAME=\"\$DB_USERNAME\" \
               -e SPRING_DATASOURCE_PASSWORD=\"\$DB_PASSWORD\" \
                $IMAGE && \
              
               echo '>>> Wait and verify container status'
               sleep 5
               if [ \$(docker inspect -f '{{.State.Running}}' backend-container || echo false) != 'true' ]; then
                 echo '❌ Container is not running. Logs:'
                 docker logs --tail=300 backend-container || true
                 docker ps -a || true
                 exit 1
               fi
               echo '✅ Container is running successfully'
                
               docker images --format '{{.Repository}}:{{.Tag}} {{.CreatedAt}}' \
               | grep '^asia-northeast3-docker.pkg.dev' \
               | sort -rk2 | awk 'NR>2 {print \$1}' | xargs -r docker rmi"